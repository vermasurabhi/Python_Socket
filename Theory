# Python_Socket
Python Socket concept
https://docs.python.org/3/library/socket.html
https://docs.python.org/3/library/socketserver.html
https://docs.python.org/3/library/internet.html

### **TCP Sockets**
    You’re going to create a socket object using socket.socket(), specifying the socket type as socket.SOCK_STREAM. When you do that, the default protocol that’s used is the Transmission Control Protocol (TCP).     This is a good default and probably what you want.
    
   # Why should you use TCP? The Transmission Control Protocol (TCP):
    
    Is reliable: Packets dropped in the network are detected and retransmitted by the sender.
    Has in-order data delivery: Data is read by your application in the order it was written by the sender.
    In contrast, User Datagram Protocol (UDP) sockets created with socket.SOCK_DGRAM aren’t reliable, and data read by the receiver can be out-of-order from the sender’s writes.
    
   # Why is this important? Networks are a best-effort delivery system. There’s no guarantee that your data will reach its destination or that you’ll receive what’s been sent to you.
    
    Network devices, such as routers and switches, have finite bandwidth available and come with their own inherent system limitations. They have CPUs, memory, buses, and interface packet buffers, just like your     clients and servers. TCP relieves you from having to worry about packet loss, out-of-order data arrival, and other pitfalls that invariably happen when you’re communicating across a network.
    
    To better understand this, check out the sequence of socket API calls and data flow for TCP:
    
    ![image](https://github.com/vermasurabhi/Python_Socket/assets/127035688/b5de8583-a6ea-4264-826f-1c90655ccb95)
    TCP socket flow
    TCP Socket Flow ([Image source](https://commons.wikimedia.org/wiki/File:InternetSocketBasicDiagram_zhtw.png))
    The left-hand column represents the server. On the right-hand side is the client.
    
    Starting in the top left-hand column, note the API calls that the server makes to set up a “listening” socket:
    * socket()
    * .bind()
    * .listen()
    * .accept()
    A listening socket does just what its name suggests. It listens for connections from clients. When a client connects, the server calls .accept() to accept, or complete, the connection.
    
    The client calls .connect() to establish a connection to the server and initiate the three-way handshake. The handshake step is important because it ensures that each side of the connection is reachable in       the network, in other words that the client can reach the server and vice-versa. It may be that only one host, client, or server can reach the other. 
    In the middle is the round-trip section, where data is exchanged between the client and server using calls to .send() and .recv().
    At the bottom, the client and server close their respective sockets.
